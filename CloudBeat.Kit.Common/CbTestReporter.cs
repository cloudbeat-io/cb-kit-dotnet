using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using CloudBeat.Kit.Common.Client;
using CloudBeat.Kit.Common.Models;
using CloudBeat.Kit.Common.Models.Hook;
using OpenQA.Selenium;

namespace CloudBeat.Kit.Common
{
    public class CbTestReporter
    {
        protected TestInstance _instance;
        protected TestResult _result;
        protected CbApiClient _client;
        protected readonly CbConfig _config;
        protected readonly IList<IDisposable> _wrappers = new List<IDisposable>();
        protected readonly AsyncLocal<CaseResult> _lastCaseResult = new();
        protected readonly ThreadLocal<CaseResult> _lastCaseResultByThread = new();
        protected readonly AsyncLocal<IWebDriver> _currentWebDriver = new();
        protected readonly AsyncLocal<ICbScreenshotProvider> _screenshotProvider = new();
        protected readonly ConcurrentDictionary<string, ICbScreenshotProvider> _screenshotProviderByTestId = new();
        protected readonly AsyncLocal<string> _currentTestId = new();

        public CbTestReporter(CbConfig config)
        {
            _config = config;
        }

        ~CbTestReporter()
        {
            // check if instance result has not been finished
            if (_result != null && !_result.EndTime.HasValue)
            {
                EndInstance();
            }
            // dispose wrappers
            foreach (var wrapper in _wrappers) wrapper.Dispose();
        }

        public void SetFramework(string name, string version)
        {
            // if we already set framework name or it was passed from CB, then ignore this call
            if (_result == null || (_result.MetaData != null && _result.MetaData.ContainsKey("framework.name")))
                return;
            if (_result.MetaData != null)
            {
                if (!_result.MetaData.ContainsKey("framework.version"))
                    _result.MetaData.Add("framework.name", name);
                else
                    _result.MetaData["framework.name"] = name;
                if (!_result.MetaData.ContainsKey("framework.version"))
                    _result.MetaData.Add("framework.version", version);
                else
                    _result.MetaData["framework.version"] = version;
            }
        }

        public void StartInstance()
        {
            if (_instance != null)
                return;
            _instance = new TestInstance(_config.RunId, _config.InstanceId);
            _result = new TestResult(_instance.RunId, _instance.Id);

            if (_instance.Run.AutoGenerated)
                _client?.RuntimeApi.StartRun(_config.ProjectId, _instance.RunId, RunStatusEnum.Running);
            if (_instance.AutoGenerated)
                _client?.RuntimeApi.StartInstance(_instance.RunId, _instance.Id, RunStatusEnum.Running);
        }

        public void EndInstance()
        {
            if (_result == null || (_result.EndTime.HasValue && _result.Status.HasValue))
                return;
            _result.End();
            if (_instance.AutoGenerated)
                _client?.RuntimeApi.EndInstance(_instance.RunId, _instance.Id, _result);
            //File.WriteAllText(@"c:\temp\result.json", JsonConvert.SerializeObject(_result));
        }

        public void StartSuite(string name, string fqn, string parentFqn = null, Action<SuiteResult> updateAction = null)
        {
            if (_result == null || string.IsNullOrEmpty(fqn))
                return;

            SuiteResult newSuite;
            if (parentFqn != null)
            {
                var parentSuite = _result.GetSuite(parentFqn);
                if (parentSuite != null)
                    newSuite = parentSuite.AddNewSuite(name, fqn);
                else
                    newSuite = _result.AddNewSuite(name, fqn);
            }
            else
            {
                newSuite = _result.AddNewSuite(name, fqn);
            }

            _lastCaseResult.Value = null;
            _lastCaseResultByThread.Value = null;

            if (updateAction != null)
                updateAction.Invoke(newSuite);
        }

        public void StartCase(string name, string fqn, Action<CaseResult> updateAction = null)
        {
            var suite = _result.GetSuiteByCaseFqn(fqn);

            StartCase(suite, name, fqn, updateAction);
        }

        public void StartCase(SuiteResult parentSuite, string caseName, string caseFqn, Action<CaseResult> updateAction = null)
        {
            if (_result == null || string.IsNullOrEmpty(caseFqn))
                return;
            if (parentSuite == null)
                throw new InvalidOperationException("Case cannot be started as no open suite was found.");

            // if suite already has a case with same FQN then it means the test is being executed multiple times due to Retry or Repeat attributes
            // therefore we clear previous case and reuse it
            // (we could have switched from ConcurrentBag (because items cannot be removed from Bag) to ConcurrentDictionary but it's too much effort)
            var caze = parentSuite.Cases.Where(x => x.Fqn == caseFqn).FirstOrDefault();
            if (caze != null)
            {
                caze.Steps.Clear();
                caze.Hooks.Clear();
                caze.Logs.Clear();
                caze.Arguments.Clear();
                caze.Attachments.Clear();
                caze.StartTime = DateTime.UtcNow;
                caze.EndTime = null;
                caze.Duration = null;
                caze.Status = null;
                caze.Failure = null;
            }
            else
            {
                caze = parentSuite.AddNewCase(caseName, caseFqn);
                if (parentSuite.StartTime == null)
                {
                    parentSuite.StartTime = caze.StartTime;
                }
            }

            _lastCaseResult.Value = _lastCaseResultByThread.Value = caze;
            if (updateAction != null)
                updateAction.Invoke(caze);
        }

        public bool EndSuite(string fqn)
        {
            if (_result == null)
                return false;

            var suiteResult = _result.GetSuite(fqn);
            if (suiteResult == null)
                return false;

            suiteResult.End();

            return true;
        }

        public CaseResult EndCase(string fqn, TestStatusEnum? status, FailureResult failure = null)
        {
            var parentSuite = _result?.GetSuiteByCaseFqn(fqn);

            if (parentSuite == null)
                return null;

            var endedCase = parentSuite.EndCase(fqn, status, failure);

            _lastCaseResult.Value = _lastCaseResultByThread.Value = endedCase;
            return endedCase;
        }

        public CaseResult EndCase(CaseResult caseResult, TestStatusEnum? status, FailureResult failure = null)
        {
            if (caseResult == null)
                return null;
            var parentSuite = caseResult.ParentSuite;
            if (parentSuite != null)
                parentSuite.EndCase(caseResult, status, failure);
            else
                caseResult.End(status, failure);
            _lastCaseResult.Value = _lastCaseResultByThread.Value = caseResult;
            return caseResult;
        }

        public TResult Step<TResult>(string name, StepTypeEnum type, Func<TResult> func, Action<StepResult> updateStepAction = null)
        {
            if (_result == null)
                return func.Invoke();
            var parentCase = _lastCaseResult.Value;
            if (parentCase == null)
                return func.Invoke();
            return Step(parentCase.Fqn, name, type, func, updateStepAction);
        }

        public TResult Step<TResult>(string caseFqn, string stepName, StepTypeEnum stepType, Func<TResult> func, Action<StepResult> updateStepAction = null)
        {
            var parentCase = _result.GetCase(caseFqn);
            StepResult newStep = parentCase != null ? StartStep(stepName, StepTypeEnum.General, parentCase) : null;
            if (newStep == null)
                return func.Invoke();
            newStep.MethodName = func.Method.Name;
            newStep.Type = stepType;
            // allow the invoker to update the step properties
            updateStepAction?.Invoke(newStep);
            try
            {
                var result = func.Invoke();
                newStep.End();
                return result;
            }
            catch (Exception e)
            {
                var failure = CbExceptionHelper.GetFailureFromException(e);
                newStep.End(failure);
                throw;
            }
        }
        public TResult Step<T, TResult>(string caseFqn, string stepName, StepTypeEnum stepType, Func<T, TResult> func, T arg, Action<StepResult> updateStepAction = null)
        {
            var parentCase = _result.GetCase(caseFqn);
            return Step(parentCase, stepName, stepType, func, arg, updateStepAction);
        }
        public TResult CaseHook<T, TResult>(string caseFqn, string hookName, HookTypeEnum hookType, Func<T, TResult> func, T arg, Action<StepResult> updateStepAction = null)
        {
            var parentCase = _result.GetCase(caseFqn);
            if (parentCase == null)
                return func.Invoke(arg);
            StepResult newStep = StartHook(hookName, hookType, parentCase);
            if (newStep == null)
                return func.Invoke(arg);
            bool argIsArray = arg != null && arg.GetType().IsArray;
            newStep.Arguments = arg == null
                ? null
                : argIsArray
                    ? (arg as IEnumerable<object>)?.Where(x => x != null).Select(x => x.ToString()).ToArray() : new string[] { arg.ToString() };
            newStep.MethodName = func.Method.Name;
            // allow the invoker to update the step properties
            updateStepAction?.Invoke(newStep);
            try
            {
                var result = func.Invoke(arg);
                if (result is Task task)
                {
                    task.Wait();
                    EndStep(newStep);
                }
                else
                    EndStep(newStep);
                return result;
            }
            catch (Exception e)
            {
                EndStep(newStep, TestStatusEnum.Failed, e);
                throw;
            }
        }
        public TResult SuiteHook<T, TResult>(string suiteFqn, string hookName, HookTypeEnum hookType, Func<T, TResult> func, T arg, Action<StepResult> updateStepAction = null)
        {
            var parentSuite = _result.GetSuite(suiteFqn);
            if (parentSuite == null || parentSuite.Fqn != suiteFqn)
                return func.Invoke(arg);
            StepResult newStep = StartHook(suiteFqn, hookName, hookType, parentSuite);
            if (newStep == null)
                return func.Invoke(arg);
            bool argIsArray = arg != null && arg.GetType().IsArray;
            newStep.Arguments = arg == null
                ? null
                : argIsArray
                    ? (arg as IEnumerable<object>)?.Where(x => x != null).Select(x => x.ToString()).ToArray() : new string[] { arg.ToString() };
            newStep.MethodName = func.Method.Name;
            // allow the invoker to update the step properties
            updateStepAction?.Invoke(newStep);
            try
            {
                var result = func.Invoke(arg);
                if (result is Task task)
                {
                    task.Wait();
                    EndStep(newStep);
                }
                else
                    EndStep(newStep);
                return result;
            }
            catch (Exception e)
            {
                EndStep(newStep, TestStatusEnum.Failed, e);
                throw;
            }
        }
        public Task<TResult> StepAsync<TResult>(string caseFqn, string stepName, StepTypeEnum stepType, Func<Task<TResult>> func, Action<StepResult> updateStepAction = null)
        {
            var parentCase = _result.GetCase(caseFqn);
            return StepAsync(parentCase, stepName, stepType, func, updateStepAction);
        }
        public Task StepAsync(string caseFqn, string stepName, StepTypeEnum stepType, Func<Task> func, Action<StepResult> updateStepAction = null)
        {
            var parentCase = _result.GetCase(caseFqn);
            return StepAsync(parentCase, stepName, stepType, func, updateStepAction);
        }
        public TResult Step<T, TResult>(CaseResult parentCase, string stepName, StepTypeEnum stepType, Func<T, TResult> func, T arg, Action<StepResult> updateStepAction = null)
        {
            if (parentCase == null)
                return func.Invoke(arg);
            StepResult newStep = StartStep(stepName, stepType, parentCase);
            if (newStep == null)
                return func.Invoke(arg);
            bool argIsArray = arg != null ? arg.GetType().IsArray : false;
            newStep.Arguments = arg == null
                ? null
                : argIsArray
                    ? (arg as IEnumerable<object>)?.Where(x => x != null).Select(x => x.ToString()).ToArray() : new string[] { arg.ToString() };
            newStep.MethodName = func.Method.Name;
            // allow the invoker to update the step properties
            updateStepAction?.Invoke(newStep);
            try
            {
                var result = func.Invoke(arg);
                if (result is Task task)
                {
                    task.Wait();
                    EndStep(newStep);
                }
                else
                    EndStep(newStep);
                return result;
            }
            catch (Exception e)
            {
                EndStep(newStep, TestStatusEnum.Failed, e);
                throw;
            }
        }
        public Task<TResult> StepAsync<TResult>(CaseResult parentCase, string stepName, StepTypeEnum stepType, Func<Task<TResult>> func, Action<StepResult> updateStepAction = null)
        {
            if (parentCase == null)
                return func();
            StepResult newStep = StartStep(stepName, stepType, parentCase);
            if (newStep == null)
                return func();
            /*bool argIsArray = arg != null ? arg.GetType().IsArray : false;
            newStep.Arguments = arg == null
                ? null
                : argIsArray
                    ? (arg as IEnumerable<object>)?.Select(x => x.ToString()).ToArray() : new string[] { arg.ToString() };
			*/
            newStep.MethodName = func.Method.Name;
            // allow the invoker to update the step properties
            updateStepAction?.Invoke(newStep);
            var testId = _currentTestId.Value;
            try
            {
                var task = func.Invoke();
                task.ConfigureAwait(true);
                TaskCompletionSource<TResult> tcs = new TaskCompletionSource<TResult>();
                task.ContinueWith(ignored =>
                {
                    if (testId != null)
                        SetCurrentTestId(testId);
                    switch (task.Status)
                    {
                        case TaskStatus.Canceled:
                            EndStep(newStep, TestStatusEnum.Skipped);
                            tcs.SetCanceled();
                            break;
                        case TaskStatus.RanToCompletion:
                            EndStep(newStep, TestStatusEnum.Passed);
                            tcs.SetResult(task.Result);
                            break;
                        case TaskStatus.Faulted:
                            //var screenshot = GetScreenshot(page);
                            EndStep(newStep, TestStatusEnum.Failed, task.Exception);
                            tcs.SetException(task.Exception);
                            break;
                        default:
                            break;
                    }
                }, new CancellationToken(), TaskContinuationOptions.AttachedToParent, TaskScheduler.Current);

                return tcs.Task;
            }
            catch (Exception e)
            {
                var tcs = new TaskCompletionSource<TResult>();
                tcs.SetException(e);
                return tcs.Task;
            }
        }
        public Task StepAsync(CaseResult parentCase, string stepName, StepTypeEnum stepType, Func<Task> func, Action<StepResult> updateStepAction = null)
        {
            if (parentCase == null)
                return func();
            StepResult newStep = StartStep(stepName, stepType, parentCase);
            if (newStep == null)
                return func();
            /*bool argIsArray = arg != null ? arg.GetType().IsArray : false;
            newStep.Arguments = arg == null
                ? null
                : argIsArray
                    ? (arg as IEnumerable<object>)?.Select(x => x.ToString()).ToArray() : new string[] { arg.ToString() };
			*/
            newStep.MethodName = func.Method.Name;
            // allow the invoker to update the step properties
            updateStepAction?.Invoke(newStep);
            string testId = _currentTestId.Value;
            try
            {
                var task = func.Invoke();
                task.ConfigureAwait(true);
                TaskCompletionSource tcs = new TaskCompletionSource();
                // StackCrawlMark stackMark = StackCrawlMark.LookForMyCaller;
                task.ContinueWith(ignored =>
                {
                    if (testId != null)
                        SetCurrentTestId(testId);
                    switch (task.Status)
                    {
                        case TaskStatus.Canceled:
                            EndStep(newStep, TestStatusEnum.Skipped);
                            tcs.SetCanceled();
                            break;
                        case TaskStatus.RanToCompletion:
                            EndStep(newStep, TestStatusEnum.Passed);
                            tcs.SetResult();
                            break;
                        case TaskStatus.Faulted:
                            //var screenshot = GetScreenshot(page);
                            EndStep(newStep, TestStatusEnum.Failed, task.Exception);
                            tcs.SetException(task.Exception);
                            break;
                        default:
                            break;
                    }
                }, new CancellationToken(), TaskContinuationOptions.AttachedToParent, TaskScheduler.Current);

                return tcs.Task;
            }
            catch (Exception e)
            {
                var tcs = new TaskCompletionSource();
                tcs.SetException(e);
                return tcs.Task;
            }
        }
        public TResult Step<T, TResult>(string caseFqn, string stepName, Func<T, TResult> func, T arg)
        {
            return Step(caseFqn, stepName, StepTypeEnum.General, func, arg);
        }

        public StepResult Step(string caseFqn, string stepName, Action action)
        {
            var parentCase = _result.GetCase(caseFqn);
            if (parentCase == null)
                return null;
            StepResult newStep = StartStep(stepName, StepTypeEnum.General, parentCase);
            if (newStep == null)
            {
                action();
                return null;
            }
            try
            {
                action();
                EndStep(newStep);
            }
            catch (Exception e)
            {
                EndStep(newStep, TestStatusEnum.Failed, e);
                throw;
            }
            return newStep;
        }

        public StepResult Step(CaseResult parentCase, string stepName, Action action)
        {
            return Step(parentCase, stepName, StepTypeEnum.General, action);
        }

        public StepResult Step(CaseResult parentCase, string stepName, StepTypeEnum stepType, Action action)
        {
            StepResult newStep = StartStep(stepName, stepType);
            if (newStep == null)
            {
                action();
                return null;
            }
            newStep.Type = stepType;
            try
            {
                action();
                EndStep(newStep);
            }
            catch (Exception e)
            {
                EndStep(newStep, TestStatusEnum.Failed, e);
                throw;
            }
            return newStep;
        }

        public TResult Step<TResult>(CaseResult parentCase, string stepName, StepTypeEnum stepType, Func<TResult> func)
        {
            StepResult newStep = StartStep(stepName, stepType);
            if (newStep == null)
            {
                return func();
            }
            newStep.Type = stepType;
            TResult retval;
            try
            {
                retval = func();
                EndStep(newStep);
            }
            catch (Exception e)
            {
                EndStep(newStep, TestStatusEnum.Failed, e);
                throw;
            }
            return retval;
        }

        public virtual StepResult StartStep(string stepName, StepTypeEnum type = StepTypeEnum.General, CaseResult parentCase = null)
        {
            if (parentCase == null)
                parentCase = _lastCaseResult.Value;
            if (parentCase == null)
                return null;
            return parentCase.AddNewStep(stepName, type);
        }

        public virtual StepResult StartHook(string stepName, HookTypeEnum type, CaseResult parentCase = null)
        {
            if (parentCase == null)
                parentCase = _lastCaseResult.Value;
            if (parentCase == null)
                return null;
            return parentCase.AddNewHook(stepName, type);
        }

        public virtual StepResult StartHook(string suiteFqn, string stepName, HookTypeEnum type, SuiteResult parentSuite = null)
        {
            parentSuite ??= _result.GetSuite(suiteFqn);
            if (parentSuite == null)
                return null;
            return parentSuite.AddNewHook(stepName, type);
        }

        public StepResult EndLastStep(
            TestStatusEnum? status = null,
            Exception exception = null,
            string screenshot = null)

        {
            var parentCase = _lastCaseResult.Value;
            if (parentCase == null || parentCase.LastOpenStep == null)
                return null;
            return EndStep(parentCase.LastOpenStep, status, exception, screenshot);
        }

        public StepResult EndStep(string name)
        {
            var stepResult = _lastCaseResult.Value?.FindOpenStepByName(name);
            if (stepResult == null)
                return null;
            return EndStep(stepResult);
        }

        public virtual StepResult EndStep(
            StepResult stepResult,
            TestStatusEnum? status = null,
            Exception exception = null,
            string screenshot = null)
        {
            if (stepResult == null)
                throw new ArgumentNullException("stepResult");
            var parentContainer = stepResult.ParentContainer;
            if (parentContainer == null)
                return null;

            if (screenshot == null && exception != null)
                screenshot = GetScreenshotForException(stepResult, exception);

            return parentContainer.EndStep(stepResult, status, exception, screenshot);
        }

        public void SetCurrentWebDriver(IWebDriver driver)
        {
            _currentWebDriver.Value = driver;
        }

        public ICbScreenshotProvider GetScreenshotProvider()
        {
            return _screenshotProvider.Value;
        }

        public void SetScreenshotProvider(ICbScreenshotProvider provider)
        {
            _screenshotProvider.Value = provider;
        }

        public void SetScreenshotProvider(string testId, ICbScreenshotProvider provider)
        {
            if (_screenshotProviderByTestId.ContainsKey(testId))
                _screenshotProviderByTestId[testId] = provider;
            else
                _screenshotProviderByTestId.TryAdd(testId, provider);
        }

        public void SetCurrentTestId(string testId)
        {
            _currentTestId.Value = testId;
        }

        public IWebDriver GetCurrentWebDriver()
        {
            return _currentWebDriver.Value;
        }

        public string GetScreenshotForException(StepResult stepResult, Exception e)
        {
            ICbScreenshotProvider screenshotProvider;
            if (_currentTestId.Value != null && _screenshotProviderByTestId.ContainsKey(_currentTestId.Value))
                screenshotProvider = _screenshotProviderByTestId[_currentTestId.Value];
            else
                screenshotProvider = _screenshotProvider.Value;

            if (e == null || screenshotProvider == null)
                return null;

            // check if we need to take a screenshot or it has been already taken in the child step
            if (stepResult.Steps?.Count > 0)
            {
                var firstSimilarFailedChildStep = stepResult.Steps.FirstOrDefault(x => x.Status == TestStatusEnum.Failed && x.Failure?.Subtype == e.GetType().Name);
                if (firstSimilarFailedChildStep != null && firstSimilarFailedChildStep.ScreenShot != null)
                    return null;
            }

            try
            {
                return screenshotProvider.TakeScreenshot();
            }
            catch
            {
                // ignored
            }

            return null;
        }

        public void AddOutputData(string name, object data)
        {
            CaseResult caseResult = _lastCaseResult.Value;
            if (caseResult == null)
                return;
            var dataEntry = new OutputDataEntry(name, data);
            List<OutputDataEntry> outputDataList = caseResult.Context.ContainsKey("resultData") ?
                caseResult.Context["resultData"] as List<OutputDataEntry> : new List<OutputDataEntry>();
            outputDataList.Add(dataEntry);
            if (!caseResult.Context.ContainsKey("resultData"))
                caseResult.Context.Add("resultData", outputDataList);
        }

        public void AddTestAttribute(string name, object value)
        {
            CaseResult caseResult = _lastCaseResult.Value;
            if (caseResult == null)
                return;

            if (!caseResult.TestAttributes.ContainsKey(name))
                caseResult.TestAttributes.Add(name, value);
            else
                caseResult.TestAttributes[name] = value;
        }

        public void SetCaseFailureReason(FailureReasonEnum reason)
        {
            CaseResult caseResult = _lastCaseResult.Value;
            if (caseResult == null)
                return;
            caseResult.FailureReasonId = (long)reason;
        }

        public void SetCaseHasWarnings(bool hasWarnings = true)
        {
            CaseResult caseResult = _lastCaseResult.Value;
            if (caseResult == null)
                return;
            caseResult.HasWarnings = hasWarnings;
        }

        public bool AddScreenRecordingAttachmentFromUrl(string url, bool addToStep = false)
        {
            try
            {
                var bytesData = CbHttpHelper.DownloadFile(url);
                if (bytesData == null)
                    return false;
                var base64Data = Convert.ToBase64String(bytesData);
                AddScreenRecordingAttachment(base64Data, addToStep);
                return true;
            }
            catch
            {
                return false;
            }
        }

        public void AddScreenRecordingAttachment(string base64Data, bool addToStep = false)
        {
            IResultWithAttachment resultWithAttachment;
            if (addToStep && _lastCaseResult.Value != null && _lastCaseResult.Value.LastOpenStep != null)
            {
                resultWithAttachment = _lastCaseResult.Value.LastOpenStep;
            }
            else if (!addToStep)
            {
                if (_lastCaseResult.Value != null)
                    resultWithAttachment = _lastCaseResult.Value;
                else
                    return;
            }
            else
            {
                return;
            }

            var attachment = CbAttachmentHelper.PrepareScreenRecordingAttachment(base64Data);
            // attachment might be null in case of IO exception
            if (attachment != null && resultWithAttachment != null)
                resultWithAttachment.Attachments.Add(attachment);
        }

        /// <summary>
        /// Add screenshot to last failed step if it doesn't have any screenshot. If there is no last failed step then add screenshot as an attachment to the test result.
        /// </summary>
        /// <param name="base64Data">Base64 encoded screenshot</param>
        public void AddScreenshot(string base64Data)
        {
            if (base64Data == null)
            {
                return;
            }

            if (_lastCaseResult.Value?.LastFailedStep != null)
            {
                if (_lastCaseResult.Value?.LastFailedStep.ScreenShot == null)
                {
                    _lastCaseResult.Value.LastFailedStep.ScreenShot = base64Data;
                }
                return;
            }

            AddScreenshotAttachment(base64Data);
        }

        /// <summary>
        /// Add screenshot as an attachment to test result.
        /// </summary>
        /// <param name="base64Data">Base64 encoded screenshot</param>
        public void AddScreenshotAttachment(string base64Data)
        {
            IResultWithAttachment resultWithAttachment;

            if (_lastCaseResult.Value != null)
                resultWithAttachment = _lastCaseResult.Value;
            else
                return;

            var attachment = CbAttachmentHelper.PrepareScreenshotAttachment(base64Data);
            // attachment might be null in case of IO exception
            if (attachment != null && resultWithAttachment != null)
                resultWithAttachment.Attachments.Add(attachment);
        }

        /// <summary>
        /// Add screenshot to last failed step if doesn't have any screenshot.
        /// </summary>
        /// <param name="base64Data">Base64 encoded screenshot</param>
        /// <returns>true if screenshot was successfully added. false if last failed step already had a screenshot or there was no failed step.</returns>
        public bool AddScreenshotToLastFailedStep(string base64Data)
        {
            if (_lastCaseResult.Value == null)
                return false;

            var lastOpenStep = _lastCaseResult.Value.LastOpenStep;
            if (lastOpenStep != null
                && lastOpenStep.Status == TestStatusEnum.Failed
                && string.IsNullOrEmpty(lastOpenStep.ScreenShot))
            {
                _lastCaseResult.Value.LastOpenStep.ScreenShot = base64Data;
                return true;
            }

            var lastFailedStep = _lastCaseResult.Value.LastFailedStep;
            if (lastFailedStep != null && string.IsNullOrEmpty(lastFailedStep.ScreenShot))
            {
                lastFailedStep.ScreenShot = base64Data;
                return true;
            }

            return false;
        }

        public void AddScreenRecordingAttachmentFromPath(string videoFilePath, bool addToStep = false)
        {
            IResultWithAttachment resultWithAttachment;
            if (addToStep && _lastCaseResult.Value != null && _lastCaseResult.Value.LastOpenStep != null)
                resultWithAttachment = _lastCaseResult.Value.LastOpenStep;
            else if (!addToStep)
            {
                if (_lastCaseResult.Value != null)
                    resultWithAttachment = _lastCaseResult.Value;
                else if (_lastCaseResultByThread.Value != null)
                    resultWithAttachment = _lastCaseResultByThread.Value;
                else
                    return;
            }
            else
                return;
            var attachment = CbAttachmentHelper.PrepareScreenRecordingAttachmentFromPath(videoFilePath);
            if (attachment != null && resultWithAttachment != null)
                resultWithAttachment.Attachments.Add(attachment);
        }

        public void LogMessage(LogMessage logMessage)
        {
            var caseResult = _lastCaseResult.Value;
            var lastOpenStep = caseResult?.LastOpenStep;
            if (lastOpenStep != null)
                lastOpenStep.Logs.Add(logMessage);
            else if (caseResult != null)
                caseResult.Logs.Add(logMessage);
        }
    }
}
