using CloudBeat.Kit.Common.Client;
using CloudBeat.Kit.Common.Models;
using OpenQA.Selenium;
using OpenQA.Selenium.Support.Extensions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace CloudBeat.Kit.Common
{
	public class CbTestReporter
	{
		protected TestRun _run;
		protected TestInstance _instance;
		protected TestResult _result;
		protected CbApiClient _client;
		protected readonly CbConfig _config;
		protected bool _syncWithCb = false;
		protected readonly IList<IDisposable> _wrappers = new List<IDisposable>();
		protected readonly ThreadLocal<CaseResult> _lastCaseResult = new ThreadLocal<CaseResult>();
		protected readonly ThreadLocal<SuiteResult> _lastSuiteResult = new ThreadLocal<SuiteResult>();
		protected readonly ThreadLocal<IWebDriver> _currentWebDriver = new ThreadLocal<IWebDriver>();

		public CbTestReporter(CbConfig config)
		{
			_config = config;
		}

		~CbTestReporter()
		{
			// check if instance result has not been finished
			if (_result != null && !_result.EndTime.HasValue)
			{
				EndInstance();
			}
			// dispose wrappers
			foreach (var wrapper in _wrappers) wrapper.Dispose();
		}

		public void SetFramework(string name, string version)
		{
			// if we already set framework name or it was passed from CB, then ignore this call
			if (_result == null || (_result.MetaData != null && _result.MetaData.ContainsKey("framework.name")))
				return;
			if (_result.MetaData != null)
			{
				if (!_result.MetaData.ContainsKey("framework.version"))
					_result.MetaData.Add("framework.name", name);
				else
					_result.MetaData["framework.name"] = name;
				if (!_result.MetaData.ContainsKey("framework.version"))
					_result.MetaData.Add("framework.version", version);
				else
					_result.MetaData["framework.version"] = version;
			}
		}

		public void StartInstance()
		{
			if (_instance != null)
				return;
			_instance = new TestInstance(_config.RunId, _config.InstanceId);
			_result = new TestResult(
				_instance.RunId,
				_instance.Id,
				_config.Options,
				_config.Capabilities,
				_config.Metadata,
				_config.EnvironmentVariables);
			AddSystemAttributesToResult();
			if (_instance.Run.AutoGenerated)
				_client?.RunApi.StartRun(_config.ProjectId, _instance.RunId, RunStatusEnum.Running);
			if (_instance.AutoGenerated)
				_client?.RunApi.StartInstance(_instance.RunId, _instance.Id, RunStatusEnum.Running, _config.Capabilities);
			//result = new TestResult(instance.getRunId(), instance.getId(), config.getCapabilities(), config.getOptions(), config.getMetadata(), config.getEnvironmentVariables());
		}

		public void EndInstance()
		{
			if (_result == null || (_result.EndTime.HasValue && _result.Status.HasValue))
				return;
			_result.End();
			if (_instance.AutoGenerated)
				_client?.RunApi.EndInstance(_instance.RunId, _instance.Id, _result);
			//File.WriteAllText(@"c:\temp\result.json", JsonConvert.SerializeObject(_result));
		}

		public void StartSuite(string name, string fqn, Action<SuiteResult> updateAction = null)
		{
			if (_result == null || string.IsNullOrEmpty(fqn))
				return;
			var newSuite = _result.AddNewSuite(name, fqn);
			_lastSuiteResult.Value = newSuite;
			_lastCaseResult.Value = null;
			if (updateAction != null)
				updateAction.Invoke(newSuite);
		}

		public void StartCase(string name, string fqn, Action<CaseResult> updateAction = null)
		{
			StartCase(_lastSuiteResult.Value, name, fqn, updateAction);
		}

		public void StartCase(SuiteResult parentSuite, string caseName, string caseFqn, Action<CaseResult> updateAction = null)
		{
			if (_result == null || string.IsNullOrEmpty(caseFqn))
				return;
			if (parentSuite == null)
				throw new InvalidOperationException("Case cannot be started as no open suite was found.");
			var newCase = parentSuite.AddNewCase(caseName, caseFqn);
			_lastCaseResult.Value = newCase;
			if (updateAction != null)
				updateAction.Invoke(newCase);
		}

		public bool EndSuite(string fqn)
		{
			if (_result == null)
				return false;
			var suiteResult = _lastSuiteResult.Value?.Fqn == fqn ? _lastSuiteResult.Value : _result.GetSuite(fqn);
			if (suiteResult == null)
				return false;
			suiteResult.End();
			return true;
		}

		public CaseResult EndCase(string fqn, TestStatusEnum? status, FailureResult failure = null)
		{
			var parentSuite = _result?.GetSuiteByCaseFqn(fqn);
			if (parentSuite == null)
				return null;
			var endedCase = parentSuite.EndCase(fqn, status, failure);
			return endedCase;
		}

        public CaseResult EndCase(CaseResult caseResult, TestStatusEnum? status, FailureResult failure = null)
		{
			if (caseResult == null)
				return null;
			var parentSuite = caseResult.ParentSuite;
			if (parentSuite != null)
				parentSuite.EndCase(caseResult, status, failure);
			else
				caseResult.End(status, failure);
			return caseResult;
        }
        /*
		public CaseResult EndCase(string suiteFqn, CaseResult caseResult, TestStatusEnum? status, FailureResult failure = null)
		{
			if (_result == null)
				return null;
			var parentSuite = _result.GetSuite(suiteFqn);
			if (parentSuite == null)
				return null;
			var endedCase = parentSuite.EndCase(caseResult, status, failure);
			return endedCase;
		}*/
        public TResult Step<TResult>(string name, StepTypeEnum type, Func<TResult> func, Action<StepResult> updateStepAction = null)
		{
			if (_result == null)
				return func.Invoke();
			var parentSuite = _lastSuiteResult.Value; //_result.Suites?.LastOrDefault();
			var parentCase = _lastCaseResult.Value; // parentSuite?.Cases?.LastOrDefault();
			if (parentCase == null)
				return func.Invoke();
			return Step(parentCase.Fqn, name, type, func, updateStepAction);
		}
		public TResult Step<TResult>(string caseFqn, string stepName, StepTypeEnum stepType, Func<TResult> func, Action<StepResult> updateStepAction = null)
		{
			var parentSuite = _lastSuiteResult.Value;
			var parentCase = parentSuite?.GetCaseByFqn(caseFqn);
			StepResult newStep = parentCase != null ? StartStep(stepName, StepTypeEnum.General, parentCase) : null;
			if (newStep == null)
				return func.Invoke();
			newStep.MethodName = func.Method.Name;
			newStep.Type = stepType;
			// allow the invoker to update the step properties
			updateStepAction?.Invoke(newStep);
			try
			{
				var result = func.Invoke();
				newStep.End();
				return result;
			}
			catch (Exception e)
			{
				var failure = CbExceptionHelper.GetFailureFromException(e);
				newStep.End(failure);
				throw;
			}
		}
		public TResult Step<T, TResult>(string caseFqn, string stepName, StepTypeEnum stepType, Func<T, TResult> func, T arg, Action<StepResult> updateStepAction = null)
		{
			var parentSuite = _lastSuiteResult.Value;
			var parentCase = parentSuite?.GetCaseByFqn(caseFqn);
			return Step(parentCase, stepName, stepType, func, arg, updateStepAction);
		}
		public TResult Step<T, TResult>(CaseResult parentCase, string stepName, StepTypeEnum stepType, Func<T, TResult> func, T arg, Action<StepResult> updateStepAction = null)
		{
			if (parentCase == null)
				return func.Invoke(arg);
			StepResult newStep = StartStep(stepName, stepType, parentCase);
			if (newStep == null)
				return func.Invoke(arg);
			bool argIsArray = arg != null ? arg.GetType().IsArray : false;
			newStep.Arguments = arg == null
				? null
				: argIsArray
					? (arg as IEnumerable<object>)?.Select(x => x.ToString()).ToArray() : new string[] { arg.ToString() };
			newStep.MethodName = func.Method.Name;
			// allow the invoker to update the step properties
			updateStepAction?.Invoke(newStep);
			try
			{
				var result = func.Invoke(arg);
				EndStep(newStep);
				return result;
			}
			catch (Exception e)
			{
				EndStep(newStep, TestStatusEnum.Failed, e);
				throw;
			}
		}
		public TResult Step<T, TResult>(string caseFqn, string stepName, Func<T, TResult> func, T arg)
		{
			return Step(caseFqn, stepName, StepTypeEnum.General, func, arg);
		}

		public TResult Step<TResult>(CaseResult caseResult, string name, StepTypeEnum general, Func<TResult> func)
		{
			throw new NotImplementedException();
		}

		public StepResult Step(string caseFqn, string stepName, Action action)
		{
			if (_lastSuiteResult.Value == null)
				return null;
			var parentCase = _lastSuiteResult.Value.GetCaseByFqn(caseFqn);
			if (parentCase == null)
				return null;
			StepResult newStep = StartStep(stepName, StepTypeEnum.General, parentCase);
			if (newStep == null)
			{
				action();
				return null;
			}
			try
			{
				action();
				EndStep(newStep);
			}
			catch (Exception e)
			{
				EndStep(newStep, TestStatusEnum.Failed, e);
				throw;
			}
			return newStep;
		}

		public StepResult Step(CaseResult parentCase, string stepName, Action action)
		{
			return Step(parentCase, stepName, StepTypeEnum.General, action);
		}
		public StepResult Step(CaseResult parentCase, string stepName, StepTypeEnum stepType, Action action)
		{
			StepResult newStep = StartStep(stepName, stepType);
			if (newStep == null)
			{
				action();
				return null;
			}
			newStep.Type = stepType;
			try
			{
				action();
				EndStep(newStep);
			}
			catch (Exception e)
			{
				EndStep(newStep, TestStatusEnum.Failed, e);
				throw;
			}
			return newStep;
		}

		public virtual StepResult StartStep(string stepName, StepTypeEnum type = StepTypeEnum.General, CaseResult parentCase = null)
		{
			if (parentCase == null)
				parentCase = _lastCaseResult.Value;
			if (parentCase == null)
				return null;
			return parentCase.AddNewStep(stepName, type);
		}

		public StepResult EndLastStep(
			TestStatusEnum? status = null,
			Exception exception = null,
			string screenshot = null)

		{
			var parentCase = _lastCaseResult.Value;
			if (parentCase == null || parentCase.LastOpenStep == null)
				return null;
			return EndStep(parentCase.LastOpenStep, status, exception, screenshot);
		}

		public StepResult EndStep(string name)
		{
			var stepResult = _lastCaseResult.Value?.FindOpenStepByName(name);
			if (stepResult == null)
				return null;
			return EndStep(stepResult);
		}

		public virtual StepResult EndStep(
			StepResult stepResult,
			TestStatusEnum? status = null,
			Exception exception = null,
			string screenshot = null)
        {
			if (stepResult == null)
				throw new ArgumentNullException("stepResult");
			var parentCase = stepResult.ParentContainer as CaseResult;
			if (parentCase == null)
				return null;

			if (screenshot == null && exception != null )
				screenshot = GetScreenshotForException(stepResult, exception);

            return parentCase.EndStep(stepResult, status, exception, screenshot);
        }

		/*public StepResult EndStep(string caseFqn, string stepName = null, TestStatusEnum? status = null)
        {
			var parentSuite = _result?.GetSuiteByCaseFqn(caseFqn);
			var parentCase = parentSuite?.GetCaseByFqn(caseFqn);
			if (parentCase == null)
				return null;
			return parentCase.EndStep(stepName, status);
		}

		public StepResult EndStep(string caseFqn, TestStatusEnum? status)
        {
			return EndStep(caseFqn, (string)null, status);
        }

		public StepResult EndStep(string caseFqn, StepResult step, TestStatusEnum? status = null)
		{
			var parentSuite = _result?.GetSuiteByCaseFqn(caseFqn);
			var parentCase = parentSuite?.GetCaseByFqn(caseFqn);
			if (parentCase == null)
				return null;
			return parentCase.EndStep(step, status);
		}*/

        public void SetCurrentWebDriver(IWebDriver driver)
        {
			_currentWebDriver.Value = driver;
        }

        public IWebDriver GetCurrentWebDriver()
        {
			if (_currentWebDriver.IsValueCreated)
				return _currentWebDriver.Value;
            return null;
        }

		public string GetScreenshotForException(StepResult stepResult, Exception e)
		{
			if (e == null)
				return null;
			// check if we need to take a screenshot or it has been already taken in the child step
			if (stepResult.Steps?.Count > 0) {
				var firstSimilarFailedChildStep = stepResult.Steps.FirstOrDefault(x => x.Status == TestStatusEnum.Failed && x.Failure?.Subtype == e.GetType().Name);
				if (firstSimilarFailedChildStep != null && firstSimilarFailedChildStep.ScreenShot != null)
					return null;
            }
			var driver = GetCurrentWebDriver();
			try
			{
                return driver?.TakeScreenshot()?.AsBase64EncodedString;
            }
			catch { }
			return null;
		}

        public void AddOutputData(string name, object data)
        {
            CaseResult caseResult = _lastCaseResult.Value;
            if (caseResult == null)
                return;
            var dataEntry = new OutputDataEntry(name, data);
            List<OutputDataEntry> outputDataList = caseResult.Context.ContainsKey("resultData") ?
                caseResult.Context["resultData"] as List<OutputDataEntry> : new List<OutputDataEntry>();
            outputDataList.Add(dataEntry);
            if (!caseResult.Context.ContainsKey("resultData"))
                caseResult.Context.Add("resultData", outputDataList);
        }

        public void AddTestAttribute(string name, object value)
        {
            CaseResult caseResult = _lastCaseResult.Value;
            if (caseResult == null)
                return;
            if (!caseResult.TestAttributes.ContainsKey(name))
                caseResult.TestAttributes.Add(name, value);
            else
                caseResult.TestAttributes[name] = value;
        }

        public void SetCaseFailureReason(FailureReasonEnum reason)
        {
            CaseResult caseResult = _lastCaseResult.Value;
            if (caseResult == null)
                return;
            caseResult.FailureReasonId = (long)reason;
        }

        private void AddSystemAttributesToResult()
		{
			//throw new NotImplementedException();
		}
	}
}
